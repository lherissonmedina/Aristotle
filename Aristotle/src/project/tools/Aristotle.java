/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.tools;

import static com.sun.prism.impl.Disposer.cleanUp;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.PointerInfo;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.geom.RoundRectangle2D;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import javafx.scene.input.KeyCode;
import static javafx.scene.input.KeyCode.C;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import project.retrieve.Location;

/**
 *
 * @author Lherisson
 */
public class Aristotle extends javax.swing.JFrame {

    /**
     * Creates new form applicationwindow
     */
    public Aristotle() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Popup = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        notificationMessage = new javax.swing.JTextArea();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        TopBar = new javax.swing.JPanel();
        closeButton = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        ScrollPane = new javax.swing.JScrollPane();
        answerArea = new javax.swing.JTextArea();
        answerArea.setVisible(false);
        inputArea = new javax.swing.JTextField();
        Logo = new javax.swing.JLabel();
        NotificationBar = new javax.swing.JPanel();
        NotificationLight = new javax.swing.JLabel();
        inputAreaShadow = new javax.swing.JLabel();
        pictureArea = new javax.swing.JLabel();

        Popup.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Popup.setTitle("dfgdf");
        Popup.setAutoRequestFocus(false);
        Popup.setBackground(new java.awt.Color(255, 255, 255));
        Popup.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Popup.setEnabled(false);
        Popup.setFocusCycleRoot(false);
        Popup.setFocusTraversalKeysEnabled(false);
        Popup.setFocusable(false);
        Popup.setFocusableWindowState(false);
        Popup.setMaximumSize(new java.awt.Dimension(100, 280));
        Popup.setMinimumSize(new java.awt.Dimension(100, 280));
        Popup.setUndecorated(true);
        Popup.setOpacity(0.7F);
        Popup.setPreferredSize(new java.awt.Dimension(100, 280));
        Popup.setResizable(false);
        Popup.getRootPane().setBackground( new Color(255,255,255,100) );
        Popup.getRootPane().setBorder( BorderFactory.createEmptyBorder());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(100, 280));
        jPanel1.setMinimumSize(new java.awt.Dimension(100, 280));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 280));
        jPanel1.setSize(new java.awt.Dimension(100, 280));

        notificationMessage.setBackground(new Color(255,255,255,0));
        notificationMessage.setColumns(20);
        notificationMessage.setForeground(new java.awt.Color(51, 51, 51));
        notificationMessage.setLineWrap(true);
        notificationMessage.setRows(5);
        notificationMessage.setText("The translucent and shaped window API was first added to the Java SE 6 Update 10 release as a private API. This functionality was moved to the public AWT package in the JDK 7 release.");
        notificationMessage.setWrapStyleWord(true);
        notificationMessage.setAutoscrolls(false);
        notificationMessage.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        notificationMessage.setBounds(new java.awt.Rectangle(0, 0, 100, 280));
        notificationMessage.setDragEnabled(false);
        notificationMessage.setFocusTraversalKeysEnabled(false);
        notificationMessage.setFocusable(false);
        notificationMessage.setMaximumSize(new java.awt.Dimension(100, 280));
        notificationMessage.setMinimumSize(new java.awt.Dimension(100, 280));
        notificationMessage.setOpaque(false);
        notificationMessage.setPreferredSize(new java.awt.Dimension(100, 280));
        notificationMessage.setRequestFocusEnabled(false);
        notificationMessage.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(notificationMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(notificationMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PopupLayout = new javax.swing.GroupLayout(Popup.getContentPane());
        Popup.getContentPane().setLayout(PopupLayout);
        PopupLayout.setHorizontalGroup(
            PopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PopupLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        PopupLayout.setVerticalGroup(
            PopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Personal Assistant");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(102, 153, 255));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setForeground(java.awt.Color.black);
        setLocation((dim.width/2)-(300/2), (dim.height/3));
        setMinimumSize(new java.awt.Dimension(300, 300));
        setName("Aristotle"); // NOI18N
        setUndecorated(true);
        setResizable(false);
        setShape(new RoundRectangle2D.Double(0, 0, this.getWidth(), this.getHeight(), 5, 5));
        setSize(new java.awt.Dimension(300, 300));

        jLayeredPane1.setMaximumSize(new java.awt.Dimension(300, 300));
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(300, 300));

        TopBar.setBackground(new Color(255,255,255,0));
        TopBar.setOpaque(false);
        TopBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TopBarMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TopBarMouseEntered(evt);
            }
        });

        closeButton.setForeground(new Color(255,255,255,0));
        closeButton.setText("close");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButtonMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout TopBarLayout = new javax.swing.GroupLayout(TopBar);
        TopBar.setLayout(TopBarLayout);
        TopBarLayout.setHorizontalGroup(
            TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopBarLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(closeButton)
                .addGap(10, 10, 10))
        );
        TopBarLayout.setVerticalGroup(
            TopBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopBarLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(closeButton)
                .addGap(10, 10, 10))
        );

        jPanel4.setMaximumSize(new java.awt.Dimension(300, 300));
        jPanel4.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel4.setOpaque(false);
        jPanel4.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel4.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel4MouseDragged(evt);
            }
        });
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel4MousePressed(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEntered(evt);
            }
        });
        jPanel4.setLayout(null);

        ScrollPane.setBackground(new Color(255,255,255,0));
        ScrollPane.setBorder(null);
        ScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        ScrollPane.setHorizontalScrollBar(null);
        ScrollPane.setMaximumSize(new java.awt.Dimension(240, 140));
        ScrollPane.setMinimumSize(new java.awt.Dimension(240, 140));
        ScrollPane.setPreferredSize(new java.awt.Dimension(240, 140));
        ScrollPane.getVerticalScrollBar().setPreferredSize(new Dimension(0, 0));
        ScrollPane.getViewport().setBorder(null);
        ScrollPane.setViewportBorder(null);
        ScrollPane.setBorder(null);
        ScrollPane.setOpaque(false);
        ScrollPane.getViewport().setOpaque(false);

        answerArea.setEditable(false);
        answerArea.setBackground(new Color(255,255,255, 200));
        answerArea.setColumns(10);
        answerArea.setFont(new java.awt.Font("DIN Alternate", 0, 14)); // NOI18N
        answerArea.setForeground(new java.awt.Color(102, 102, 102));
        answerArea.setLineWrap(true);
        answerArea.setTabSize(10);
        answerArea.setWrapStyleWord(true);
        answerArea.setAlignmentX(0.0F);
        answerArea.setAlignmentY(0.0F);
        answerArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 6, 15));
        answerArea.setCaretColor(new java.awt.Color(255, 255, 255));
        answerArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        answerArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        answerArea.setFocusTraversalKeysEnabled(false);
        answerArea.setFocusable(false);
        answerArea.setMaximumSize(new java.awt.Dimension(240, 100));
        answerArea.setMinimumSize(new java.awt.Dimension(240, 100));
        answerArea.setName("answerArea"); // NOI18N
        answerArea.setRequestFocusEnabled(false);
        answerArea.setSelectedTextColor(new java.awt.Color(51, 51, 51));
        answerArea.setSelectionColor(new java.awt.Color(255, 255, 255));
        answerArea.setVerifyInputWhenFocusTarget(false);
        answerArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                answerAreaMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                answerAreaMouseEntered(evt);
                MouseEntered(evt);
            }
        });
        ScrollPane.setViewportView(answerArea);
        answerArea.getAccessibleContext().setAccessibleName("");

        jPanel4.add(ScrollPane);
        ScrollPane.setBounds(30, 101, 240, 140);

        inputArea.setBackground(new Color(255,255,255, 255));
        inputArea.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        inputArea.setForeground(new java.awt.Color(102, 102, 102));
        inputArea.setText("How may I help you?");
        inputArea.setActionCommand("");
        inputArea.setAlignmentX(0.0F);
        inputArea.setAlignmentY(0.0F);
        inputArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        inputArea.setCaretColor(new java.awt.Color(0, 102, 255));
        inputArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        inputArea.setDoubleBuffered(true);
        inputArea.setFocusCycleRoot(true);
        inputArea.setFocusTraversalPolicyProvider(true);
        inputArea.setInheritsPopupMenu(true);
        inputArea.setMaximumSize(new java.awt.Dimension(270, 14));
        inputArea.setMinimumSize(new java.awt.Dimension(270, 14));
        inputArea.setName("inputArea"); // NOI18N
        inputArea.setOpaque(true);
        inputArea.setPreferredSize(new java.awt.Dimension(270, 14));
        inputArea.setSelectedTextColor(new java.awt.Color(204, 204, 204));
        inputArea.setSelectionColor(new Color(255,255,255,0));
        inputArea.setVerifyInputWhenFocusTarget(false);
        inputArea.moveCaretPosition(0);
        inputArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputAreaActionPerformed(evt);
            }
        });
        inputArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputAreaKeyReleased(evt);
            }
        });
        jPanel4.add(inputArea);
        inputArea.setBounds(27, 52, 246, 29);

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project/resources/name.png"))); // NOI18N
        Logo.setFocusTraversalKeysEnabled(false);
        Logo.setFocusable(false);
        Logo.setInheritsPopupMenu(false);
        Logo.setRequestFocusEnabled(false);
        Logo.setVerifyInputWhenFocusTarget(false);
        jPanel4.add(Logo);
        Logo.setBounds(65, 20, 170, 26);

        NotificationBar.setBackground(new Color(255,255,255,0));
        NotificationBar.setOpaque(false);
        NotificationBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEntered(evt);
            }
        });

        NotificationLight.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        NotificationLight.setForeground(new Color(255,255,255,0));
        NotificationLight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NotificationLight.setText("•");
        NotificationLight.setVisible(false);
        NotificationLight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NotificationLightMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NotificationLightMouseEntered(evt);
                MouseEntered(evt);
            }
        });

        javax.swing.GroupLayout NotificationBarLayout = new javax.swing.GroupLayout(NotificationBar);
        NotificationBar.setLayout(NotificationBarLayout);
        NotificationBarLayout.setHorizontalGroup(
            NotificationBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
            .addGroup(NotificationBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NotificationBarLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NotificationLight, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(5, 5, 5)))
        );
        NotificationBarLayout.setVerticalGroup(
            NotificationBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 33, Short.MAX_VALUE)
            .addGroup(NotificationBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NotificationBarLayout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addComponent(NotificationLight)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel4.add(NotificationBar);
        NotificationBar.setBounds(264, 0, 36, 33);

        inputAreaShadow.setBackground(new java.awt.Color(255, 102, 153));
        inputAreaShadow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project/resources/shadow.png"))); // NOI18N
        inputAreaShadow.setFocusTraversalKeysEnabled(false);
        inputAreaShadow.setFocusable(false);
        inputAreaShadow.setInheritsPopupMenu(false);
        inputAreaShadow.setRequestFocusEnabled(false);
        inputAreaShadow.setVerifyInputWhenFocusTarget(false);

        pictureArea.setBackground(new java.awt.Color(255, 255, 255));
        pictureArea.setForeground(new java.awt.Color(204, 255, 204));
        pictureArea.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pictureArea.setIcon(image);
        pictureArea.setAlignmentY(0.0F);
        pictureArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pictureArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pictureArea.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/project/resources/splash.png"))); // NOI18N
        pictureArea.setDoubleBuffered(true);
        pictureArea.setEnabled(false);
        pictureArea.setFocusTraversalKeysEnabled(false);
        pictureArea.setFocusable(false);
        pictureArea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pictureArea.setIconTextGap(0);
        pictureArea.setMaximumSize(new java.awt.Dimension(300, 300));
        pictureArea.setMinimumSize(new java.awt.Dimension(300, 300));
        pictureArea.setName("pictureArea"); // NOI18N
        pictureArea.setOpaque(true);
        pictureArea.setPreferredSize(new java.awt.Dimension(300, 300));
        pictureArea.setRequestFocusEnabled(false);
        pictureArea.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(inputAreaShadow, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(TopBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 247, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(pictureArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(44, 44, 44)
                    .addComponent(inputAreaShadow, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(211, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(TopBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(264, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(pictureArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)))
        );
        jLayeredPane1.setLayer(TopBar, 5);
        jLayeredPane1.setLayer(jPanel4, 4);
        jLayeredPane1.setLayer(inputAreaShadow, 5);
        jLayeredPane1.setLayer(pictureArea, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inputAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputAreaKeyReleased

        inputArea.setLocation(inputArea.getX(), 52);
        inputAreaShadow.setLocation(inputAreaShadow.getX(), 44);

        if (String.valueOf(evt.getKeyChar()).matches("\\w") || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            if (inputArea.getSelectedText() == null && inputArea.getCaretPosition() < inputArea.getText().length()) {

            } else {
                Suggestion.autoComplete(inputArea.getText().substring(0, inputArea.getCaretPosition()).toLowerCase());
            }
        }
    }//GEN-LAST:event_inputAreaKeyReleased

    public static void setAnswer(String Answer, Image img, boolean success) {
        if(img != null && !Answer.isEmpty()){
        answerLock.lock();
            if (success) {
                image.setImage(img);
                pictureArea.setEnabled(true);
                answerArea.setText(Answer);
                answerArea.setForeground(new java.awt.Color(50, 150, 50));
                window.repaint();
            } else {
                answerArea.setText(Answer);
                answerArea.setForeground(new java.awt.Color(150, 50, 50));
            }
            answerLock.unlock();
        }else{
            setAnswer(Answer, false);
        }
    }

    public static void setAnswer(String Answer, boolean success) {
        if(!Answer.isEmpty()){
        answerLock.lock();
        try {
            if (success) {
                pictureArea.setEnabled(false);
                answerArea.setText(Answer);
                answerArea.setForeground(new java.awt.Color(50, 150, 50));
                window.repaint();
            } else {
                answerArea.setText(Answer);
                answerArea.setForeground(new java.awt.Color(150, 50, 50));
            }
        } finally {
            answerLock.unlock();
        }}
        else{
            answerArea.setText("Uh oh, something went wrong; can you try asking that differently?");
            answerArea.setForeground(new java.awt.Color(150, 50, 50));
        }
    }

    public static void setAnswer(String Answer) {

        answerLock.lock();
        try {
            answerArea.setText(Answer);
            answerArea.setForeground(new java.awt.Color(50, 102, 102));
            window.repaint();
        } finally {
            answerLock.unlock();
        }
    }

//    public static void setSuggestion(String suggestion, Boolean suggest) {
//        answerArea.setText(suggestion);
//        if (suggest) {
//            answerArea.setForeground(new java.awt.Color(50, 102, 102));
//        } else {
//            answerArea.setForeground(new java.awt.Color(102, 102, 102));
//        }
//
//    }
    public static void setAutocomplete(String completion, Boolean complete) {

        autoCompleted = complete;
        if (complete) {
            int position = inputArea.getCaretPosition();
            inputArea.setText(inputArea.getText().substring(0, position) + completion);
            inputArea.moveCaretPosition(position);
        } else {

        }

    }

    public static void setNotification(String Notification, boolean notif) {
        notify = notif;
        notificationLock.lock();
        try {
            notificationMessage.setText(Notification);
            if (!NotificationLight.isVisible() && notify) {
                NotificationLight.setVisible(true);
                glow.start();
            }
        } finally {
            notificationLock.unlock();
        }
    }

    public static String getQuery() {
        return inputArea.getText();
    }

    public static String getAnswer() {
        return answerArea.getText();
    }

    public static int getQueue() {
        return queue;
    }

    public static void setMemory(String[] mem) {
        memory.clear();
        memory.addAll(Arrays.asList(mem));
    }

    public static List getMemory() {
        return memory;
    }

    private void answerAreaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_answerAreaMouseEntered
        answerArea.setBackground(new Color(255, 255, 255, 220));
    }//GEN-LAST:event_answerAreaMouseEntered

    private void answerAreaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_answerAreaMouseExited
        answerArea.setBackground(new Color(255, 255, 255, 200));
    }//GEN-LAST:event_answerAreaMouseExited

    private void MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseEntered
        if (pictureArea.isEnabled()) {

            if (showAnswer != null && !showAnswer.isAlive()) {
                showAnswer = new Thread(moveAns);
                showAnswer.start();
            }

            moveAns.setShow(false);
        }
    }//GEN-LAST:event_MouseEntered

    private void MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseExited
        if (pictureArea.isEnabled()) {
            moveAns.setShow(true);
        }
    }//GEN-LAST:event_MouseExited

    private void TopBarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopBarMouseEntered
        closeButton.setForeground(new Color(255, 255, 255, 100));
    }//GEN-LAST:event_TopBarMouseEntered

    private void TopBarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopBarMouseExited
        closeButton.setForeground(new Color(255, 255, 255, 0));
    }//GEN-LAST:event_TopBarMouseExited

    private void closeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseEntered
        closeButton.setForeground(new Color(50, 120, 120, 200));
    }//GEN-LAST:event_closeButtonMouseEntered

    private void closeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseExited
        closeButton.setForeground(new Color(255, 255, 255, 100));
    }//GEN-LAST:event_closeButtonMouseExited

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        cleanUp();
        System.exit(0);
    }//GEN-LAST:event_closeButtonMouseClicked

    private void jPanel4MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseDragged
        window.setLocation(window.getLocation().x + evt.getX() - pressedX,
                window.getLocation().y + evt.getY() - pressedY);
        Popup.setLocation(window.getX() + 200, window.getY() + 10);
    }//GEN-LAST:event_jPanel4MouseDragged

    private void jPanel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MousePressed
        pressedX = (int) evt.getX();
        pressedY = (int) evt.getY();
    }//GEN-LAST:event_jPanel4MousePressed

    private void NotificationLightMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NotificationLightMouseEntered
        if (!Popup.isVisible()) {
            Popup.setLocation(window.getX() + 200, window.getY() + 10);
        }
        Popup.setVisible(true);

        if (showNotification != null && !showNotification.isAlive()) {
            showNotification = new Thread(moveNotif);
            showNotification.start();
        }

        moveNotif.setShow(true);


    }//GEN-LAST:event_NotificationLightMouseEntered

    private void NotificationLightMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NotificationLightMouseExited

        moveNotif.setShow(false);

    }//GEN-LAST:event_NotificationLightMouseExited

    private void inputAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputAreaKeyPressed

        if (evt.getKeyCode() != KeyEvent.VK_SPACE) {
            lastTime = 0;
        }
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            thisTime = evt.getWhen();

            if ((thisTime - lastTime) < 500) {
                inputArea.setText(inputArea.getText().trim());
                Suggestion.autoComplete(inputArea.getText().toLowerCase());
                inputArea.moveCaretPosition(inputArea.getText().length());
            }
            lastTime = thisTime;
        } else if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE && inputArea.getSelectedText() != null) {
            inputArea.setText(inputArea.getText().substring(0, inputArea.getCaretPosition()));
        } else if (!String.valueOf(evt.getKeyChar()).matches("\\w")) {

            if (inputArea.getSelectedText() != null && inputArea.getCaretPosition() != 0 && !String.valueOf(evt.getKeyChar()).matches("=")) {
                inputArea.setText(inputArea.getText().substring(0, inputArea.getCaretPosition()));
            }
        }
    }//GEN-LAST:event_inputAreaKeyPressed

    private void inputAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputAreaActionPerformed
        if (!answerArea.isVisible()) {
            answerArea.setVisible(true);
        }

        if (inputArea.getCaretPosition() != 0 && inputArea.getSelectedText() != null) {
            inputArea.setText(inputArea.getText().substring(0, inputArea.getCaretPosition()).trim());
        }

        inputArea.setLocation(inputArea.getX(), 53);
        inputAreaShadow.setLocation(inputAreaShadow.getX(), 45);
        inputArea.selectAll();
        setAnswer("Let me see...");
        queue++;
        Thread execute = new Thread(new Guess());
        execute.start();
    }//GEN-LAST:event_inputAreaActionPerformed

    class moveNotification implements Runnable {

        private boolean show;

        public void setShow(boolean s) {
            show = s;
        }

        @Override
        public void run() {
            try {
                while (Popup.isVisible() && !Thread.interrupted()) {

                    if (show && NotificationLight.isVisible() && Popup.getX() <= window.getX() + 290) {

                        Popup.setLocation(Popup.getX() + 10, window.getY() + 10);
                    } else if ((!show || !NotificationLight.isVisible()) && Popup.getX() > window.getX() + 200) {

                        Popup.setLocation(Popup.getX() - 10, window.getY() + 10);

                        if (Popup.getX() == window.getX() + 200) {
                            Popup.setVisible(false);
                        }
                    }
                    Thread.sleep(20);
                }
            } catch (InterruptedException e) {

            } finally {
                Popup.setVisible(false);
                Popup.setLocation(window.getX() + 200, window.getY() + 10);
                cleanUp();
            }
        }

    }

    class moveAnswer implements Runnable {

        private boolean show;

        public void setShow(boolean s) {
            show = s;
        }

        @Override
        public void run() {
            try {
                while ((pictureArea.isEnabled() || ScrollPane.getY() > Ylocation) && !Thread.interrupted()) {
                    if (pictureArea.isEnabled() && !show && ScrollPane.getY() <= window.getHeight()) {
                        ScrollPane.setLocation(ScrollPane.getX(), ScrollPane.getY() + 20);

                    } else if ((show || !pictureArea.isEnabled()) && ScrollPane.getY() > Ylocation) {
                        ScrollPane.setLocation(ScrollPane.getX(), ScrollPane.getY() - 20);
                    }
                    Thread.sleep(20);
                }
            } catch (InterruptedException e) {

            } finally {
                cleanUp();
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aristotle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            Location.getMyLocation();
            window = new Aristotle();
            window.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Logo;
    private javax.swing.JPanel NotificationBar;
    private static javax.swing.JLabel NotificationLight;
    private static javax.swing.JDialog Popup;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JPanel TopBar;
    public static javax.swing.JTextArea answerArea;
    private javax.swing.JLabel closeButton;
    private static javax.swing.JTextField inputArea;
    private javax.swing.JLabel inputAreaShadow;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private static javax.swing.JTextArea notificationMessage;
    public static javax.swing.JLabel pictureArea;
    // End of variables declaration//GEN-END:variables
private static Aristotle window;
    private static final ImageIcon image = new ImageIcon();
    private static final Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

    private static final List<String> memory = new LinkedList<>();

    private static final int Ylocation = 101;
    private static int queue;

    private Thread showAnswer = new Thread();
    private final moveAnswer moveAns = new moveAnswer();

    private Thread showNotification = new Thread();
    private final moveNotification moveNotif = new moveNotification();

    private int pressedX, pressedY;
    private final PointerInfo a = MouseInfo.getPointerInfo();
    private static boolean notify = false, autoCompleted;
    private static final Lock answerLock = new ReentrantLock();
    private static final Lock notificationLock = new ReentrantLock();
    private static long thisTime = 0, lastTime = 0;

    private static final Timer glow = new Timer(8, new ActionListener() {
        private int alpha = 0;
        private boolean up = true;

        @Override
        public void actionPerformed(ActionEvent evt) {

            NotificationLight.setForeground(new Color(255, 255, 255, alpha));
            if (up) {
                alpha += 2;
                if (alpha >= 255) {
                    alpha = 255;
                    up = false;
                }
            } else if (!up) {
                alpha -= 2;

                if (!notify && alpha <= 0) {
                    NotificationLight.setVisible(false);
                    up = true;
                    alpha = 0;
                    glow.stop();
                } else if (alpha <= 0) {
                    alpha = 0;
                    up = true;
                }
            }

        }
    });
}
